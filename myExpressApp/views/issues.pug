extends default

block content
    div(id="content")
            H1(id="ContentHeader") ISSUES DATA
            div(class="desktop")
                div(class="CanvasWrapper")
                    h1(class="CanvasHeader") Issues Sorted by Time Spent
                    canvas(id="timeSpent")
            div(class="mobile")
                div(class="CanvasWrapper")
                    h1(class="CanvasHeader") Issues Sorted by Time Spent
                    canvas(id="timeSpentMobile")
            div(class="CanvasWrapper")
                h1(class="CanvasHeader") Contributions by User on Selected Issue
                canvas(id="timeSpentByUser")
            div(class="dropdown")
                button(onclick="ToggleDropdown()" class="dropbtn") Choose A Different Issue
                div(id="myDropdown" class="dropdown-content")
                    div(input type="text" placeholder="Search.." id="myInput" onkeyup="FilterDropdown()")
                    div(id="dropdownList")
        h1(id ="ReferenceListHeader") Tracked Issues
        div(id="ReferenceList")
        button(id="nextbtn" class="tabbtn" onclick="TabUp()") Next
        button(id="backbtn" class="tabbtn" onclick="TabDown()") Previous
    script(src="https://cdn.jsdelivr.net/npm/chart.js")
    script.
        //IssueTimeSpent
        var timeSpentArray;
        var issueNames;
        const interval = 2;
        var index;

        //IssueTimeSpentByUser
        var issueName;
        var userNames;
        var timeSpentByUserArray;
        var timeSpentByUserChart;
        Main();
        async function Main()
        {
            await IssueTimeSpentDataGet();
            await DrawIssueTimeSpentGraph();
            await DrawIssueTimeSpentGraphMobile();

            await PopulateDropdown();
            await IssueTimeSpentByUserDataGet(1);
            await IssueTimeSpentByUserGraph();
            await ListIssues(0);
        }
        async function IssueTimeSpentDataGet()
        {
            const allIssuesResponse = await fetch("http://localhost:5220/issue");
            const allIssues = await allIssuesResponse.json();
            var issuesTimeSpentArray = await Promise.all(allIssues.map(async function(index){
                const issueTimeResponse = await fetch("http://localhost:5220/issuemodel/" + index.id + "/timespent");
                const issueTime = await issueTimeResponse.json();
                const data = {
                    totalTimeSpent: issueTime.totaltimespent,
                    issueName: index.issueName,
                }
                return data;
            }));
            issuesTimeSpentArray.sort(function(a, b){
               return b.totalTimeSpent - a.totalTimeSpent;
            });
            issueNames = issuesTimeSpentArray.map(function(index){
                    return index.issueName.substring(0, 25) + "...";
            });
            timeSpentArray = issuesTimeSpentArray.map(function(index){
                return index.totalTimeSpent;
            });
            var numRecords = 5;
            if (issueNames.length > numRecords)
            {
                issueNames = issueNames.slice(0, numRecords);
            }
            if (timeSpentArray.length > numRecords)
            {
                timeSpentArray = timeSpentArray.slice(0, numRecords);
            }
        }
        async function DrawIssueTimeSpentGraph() 
        {
            const xValues = [100,200,300,400,500,600,700,800,900,1000];
            var myChart = document.getElementById("timeSpent");
            new Chart(myChart, {
                type: 'bar',
                data: {
                labels: issueNames,
                datasets: [{
                    label: 'TOTAL TIME SPENT BY ALL USERS ON THE ISSUE IN SECONDS',
                    data: timeSpentArray,
                    borderWidth: 1
                }]
                },
                options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
                }
            });
        }
        async function DrawIssueTimeSpentGraphMobile()
        {
            const xValues = [100,200,300,400,500,600,700,800,900,1000];
            var myChart = document.getElementById("timeSpentMobile");
            new Chart(myChart, {
                type: 'bar',
                data: {
                labels: issueNames,
                datasets: [{
                    label: 'TIME SPENT BY ALL USERS ON ISSUE (SEC)',
                    data: timeSpentArray,
                    borderWidth: 1
                }]
                },
                options: {
                scales: {
                    x: {
                        ticks: {
                        //option 2, use callback to change labels to empty string
                        callback: () => ('')
                        }
                    },
                    y: {
                        beginAtZero: true
                    }
                }
                }
            });
        }
        async function IssueTimeSpentByUserDataGet(issueId)
        {
            const myIssueResponse = await fetch("http://localhost:5220/issue/" + issueId);
            const myIssue = await myIssueResponse.json();
            const allUsersResponse = await fetch("http://localhost:5220/issuemodel/" + issueId + "/users");
            const allUsers = await allUsersResponse.json();
            issueName = myIssue.issueName;
            var timesWithUsersArray = await Promise.all(allUsers.map(async function(index){
                const issueTimeResponse = await fetch("http://localhost:5220/issuemodel/" + myIssue.id + "/" + index.id + "/timespentbyuser");
                const issueTimes = await issueTimeResponse.json();
                var issueTimeSpent = 0;
                for (var i = 0; i < issueTimes.length; i++)
                {
                    issueTimeSpent += Number(issueTimes[i].totalTimeElapsed);
                }
                
                var data = {
                    'UserName': index.UserName,
                    'totalTimeSpent': issueTimeSpent
                };
                return data;
            }));
            timesWithUsersArray.sort(function(a, b){
               return b.totalTimeSpent - a.totalTimeSpent;
            });
            userNames = timesWithUsersArray.map(function(index){
                return index.UserName;
            });
            timeSpentByUserArray = timesWithUsersArray.map(function(index){
                return index.totalTimeSpent;
            });
            const numRecords = 10;
            if (userNames.length > numRecords)
            {
                userNames = userNames.slice(0, numRecords);
            }
            if (timeSpentByUserArray.length > numRecords)
            {
                timeSpentByUserArray = timeSpentByUserArray.slice(0, numRecords);
            }
        }
        async function IssueTimeSpentByUserGraph()
        {
            var myChart = document.getElementById("timeSpentByUser");
            timeSpentByUserChart = new Chart(myChart, 
            {
                type: 'pie',
                data: 
                {
                    labels: userNames,
                    datasets: 
                    [{
                        label: issueName,
                        data: timeSpentByUserArray,
                        hoverOffset: 4
                    }],
                    options: {
                        plugins: {
                            datalabels: {
                                formatter: (value) => 
                                {
                                    if (value < 15) return '';
                                    return value + '%';
                                },
                            },
                        }
                    }
            }});
        }

        function ToggleDropdown() {
            document.getElementById("myDropdown").classList.toggle("show");
        }
        function FilterDropdown() 
        {
            const input = document.getElementById("myInput");
            const filter = input.value.toUpperCase();
            const dropdown = document.getElementById("myDropdown");
            const a = dropdown.getElementsByClassName("dropdownElement");
            for (let i = 0; i < a.length; i++) 
            {
                txtValue = a[i].textContent || a[i].innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) 
                {
                    a[i].style.display = "";
                } 
                else 
                {
                    a[i].style.display = "none";
                }
            }
        }
        async function PopulateDropdown()
        {
            const dropdown = document.getElementById("dropdownList");
            const allIssuesResponse = await fetch("http://localhost:5220/issue");
            const allIssues = await allIssuesResponse.json();
            for (let i = 0; i < allIssues.length; i++) 
            {
                var dropElement = document.createElement("button");
                dropElement.className = "dropdownElement";
                dropElement.textContent = allIssues[i].issueName;
                dropElement.addEventListener('click', async function ()
                {
                    await timeSpentByUserChart.destroy();
                    await IssueTimeSpentByUserDataGet(allIssues[i].id);
                    await IssueTimeSpentByUserGraph();
                    ToggleDropdown();
                });
                dropdown.appendChild(dropElement);
            }
        }
        async function ListIssues(index)
        {
            const destinationDiv = document.getElementById("ReferenceList");
            const allIssuesResponse = await fetch("http://localhost:5220/issue");
            var allIssues = await allIssuesResponse.json();
            for (var child of destinationDiv.childNodes)
            {
                console.log(child);
                destinationDiv.removeChild(child);
            }
            var links = document.getElementsByClassName("ReferenceLink");
            for (var child of links)
            {
                child.remove();
            }
            allIssues = allIssues.slice(index, index + interval);
            for (let i = 0; i < allIssues.length; i++) 
            {
                var issueLink = document.createElement('a');
                issueLink.className = "ReferenceLink";
                issueLink.href = "http://localhost:5220/views/issuemodel/issue/" + allIssues[i].id;
                issueLink.textContent = "Id: " + allIssues[i].id + ", URL: " + allIssues[i].url + ", IssueName: " + allIssues[i].issueName;
                destinationDiv.appendChild(issueLink);
            }
        }
        async function Tab(difference)
        {
            if (index >= Number(-difference))
            {
                index += Number(difference);
                const allUsersResponse = await fetch("http://localhost:5220/user");
                const allUsers = await allUsersResponse.json();
                if (allUsers.length >= (Number(index)))
                {
                    var lessUsers = allUsers.slice(index, Number(index + difference));
                    var destinationDiv = document.getElementById("UserList");
                    for (var child of destinationDiv.childNodes)
                    {
                        destinationDiv.removeChild(child);
                    }
                    for (var i = 0; i < lessUsers.length; i++)
                    {
                        var userLink = document.createElement('A');
                        userLink.className = "UserLink";
                        userLink.href = "http://localhost:5220/views/usermodel/user/" + lessUsers[i].id;
                        userLink.textContent = "Id: " + lessUsers[i].id + ", UserName: " + lessUsers[i].UserName + "\n";
                        destinationDiv.appendChild(userLink);
                    }
                }
                else
                {

                } 
            }
            await DisplayButtonsToggle(difference);
        }
        async function TabUp()
        {
            console.log("index: " + index);
            const allRecordsResponse = await fetch("http://localhost:5220/issue");
            const allRecords = await allRecordsResponse.json();
            if (index == null)
            {
                index = 0;
            }
            if ((allRecords.length) > (Number(index) + interval))
            {
                console.log("Index: " + index);
                console.log("Tabbing up sire");
                index += interval;
                console.log("Index + Interval: " + index);
                ListIssues(Number(index));
            }
        }
        async function TabDown()
        {
            console.log("index: " + index);
            const allRecordsResponse = await fetch("http://localhost:5220/issue");
            const allRecords = await allRecordsResponse.json();
            if (index == null)
            {
                index = 0;
            }
            if (Number(index - interval) >= 0)
            {
                console.log("Tabbing down milord");
                index -= interval;
                ListIssues(Number(index));
            }
        }
        async function ToggleNav()
        {
            document.getElementById("mobileNav").classList.toggle("displayNone");
        }