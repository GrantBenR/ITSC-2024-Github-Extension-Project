extends default

block content
    #content
        div.recordHeader
            h1 TimerId: #{id}
            h1 UserId: #{userId}
            h1 IssueId: #{issueId}
            h3 Total Time Spent: #{TotalTimeElapsed}
        div.CanvasWrapper
            h1.CanvasHeader Time Elapsed Per Timer Period
            canvas#myChart
        h1 Related Records:
        p#idhidden #{id}
        p#Hidden #{JSON.stringify(timerperiods)}
        div#referenceList
        button(id="nextbtn" class="tabbtn" onclick="TabUp()") Next
        button(id="backbtn" class="tabbtn" onclick="TabDown()") Previous
    script(src="https://cdn.jsdelivr.net/npm/chart.js")
    script.
        var timerPeriodsTimes;
        var periods;
        Main();
        async function Main()
        {
            await ListUserAndIssue();
            await ListTimerPeriods();
            await GetTimerPeriodsGraphData();
            await DrawTimerPeriodsGraph();
        }
        async function ListTimerPeriods()
        {
            const timerperiodsReference = await document.getElementById("Hidden");
            const timerperiods = await JSON.parse(timerperiodsReference.textContent);
            const destinationDiv = document.getElementById("referenceList");
            for (let i = 0; i < timerperiods.length; i++)
            {
                var link = document.createElement('a');
                link.className = "referenceLink";
                link.href = "http://localhost:5220/views/timerperiodmodel/timerperiod/" + timerperiods[i].id;
                link.textContent = "Id: " + timerperiods[i].id + ", StartDate: " + timerperiods[i].startDate + ", EndDate: " + timerperiods[i].endDate + ", TimerId: " + timerperiods[i].timerId + "\n";
                destinationDiv.appendChild(link);
            }
        }
        async function ListUserAndIssue()
        {
            var idElement = await document.getElementById("idhidden");
            var id = Number(idElement.textContent);
            var userResponse = await fetch("http://localhost:5220/timermodel/" + id + "/user");
            var user = await userResponse.json();
            var issueResponse = await fetch("http://localhost:5220/timermodel/" + id + "/issue");
            var issue = await issueResponse.json();
            destinationDiv = await document.getElementById("referenceList");
            var userlink = await document.createElement('a');
            userlink.className = "referenceLink";
            userlink.href = "http://localhost:5220/views/usermodel/user/" + user[0].id;
            userlink.textContent = "Id: " + user[0].id + ", UserName: " + user[0].UserName + "\n";
            destinationDiv.appendChild(userlink);
            var issuelink = await document.createElement('a');
            issuelink.className = "referenceLink";
            issuelink.href = "http://localhost:5220/views/issuemodel/issue/" + issue[0].id;
            issuelink.textContent = "Id: " + issue[0].id + ", URL: " + issue[0].url + ", Name: " + issue[0].issueName + "\n";
            destinationDiv.appendChild(issuelink);
            var date = new Date(Date()).get
        }
        async function GetTimerPeriodsGraphData()
        {
            var idElement = await document.getElementById("idhidden");
            var id = Number(idElement.textContent);
            var timerPeriodsResponse = await fetch("/timermodel/" + id + "/timerperiods");
            var timerPeriods = await timerPeriodsResponse.json();
            timerPeriods.sort(function(a, b){
                return b.totalTimeElapsed - a.totalTimeElapsed;
            });
            periods = await Promise.all(timerPeriods.map(async function(index){
                var period = index.startDate.slice(0, 25) + " - " + index.endDate;
                return period;
            }));
            timerPeriodsTimes = await Promise.all(timerPeriods.map(async function(index){
                return index.totalTimeElapsed;
            }));
            var numRecords = 6;
            if (periods.length > numRecords)
            {
                periods = periods.slice(0, numRecords);
            }
            if (timerPeriodsTimes.length > numRecords)
            {
                timerPeriodsTimes = timerPeriodsTimes.slice(0, numRecords);
            }

        }
        async function DrawTimerPeriodsGraph()
        {
            var myChart = document.getElementById("myChart");
            timeSpentByUserChart = new Chart(myChart, 
            {
                type: 'pie',
                data: 
                {
                    labels: periods,
                    datasets: 
                    [{
                        label: "Time elapsed in seconds",
                        data: timerPeriodsTimes,
                        hoverOffset: 4
                    }],
                    options: {
                        plugins: {
                            datalabels: {
                                formatter: (value) => 
                                {
                                    if (value < 15) return '';
                                    return value + '%';
                                },
                            },
                        }
                    }
            }});
        }
