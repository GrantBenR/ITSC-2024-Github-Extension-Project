extends default

block content
    #content
        div.recordHeader
            h1 Issue Name: #{issueName}
            h1 ID: #{id}
            h1 URL: #{issueUrl}
            h3 Total time users spent on this issue:  Days: #{formattedTimes.days}, Hours: #{formattedTimes.hours}, Minutes: #{formattedTimes.minutes}, Seconds: #{formattedTimes.seconds}
        div.CanvasWrapper
            h1.CanvasHeader Time Spent By User on Selected Issue
            canvas#timeSpentByUser
        h1 Related Users:
        p#idhidden #{id}
        p#Hidden #{JSON.stringify(users)}
        div#ReferenceList
        button(id="nextbtn" class="tabbtn" onclick="TabUp()") Next
        button(id="backbtn" class="tabbtn" onclick="TabDown()") Previous
    script(src="https://cdn.jsdelivr.net/npm/chart.js")
    script.
        var userNames;
        var timeSpentByUserArray;
        var index;
        const interval = 2;
        Main();
        async function Main()
        {
            await ListUsers(0);
            const issueId = await document.getElementById("idhidden").textContent;
            await IssueTimeSpentByUserDataGet(issueId);
            await IssueTimeSpentByUserGraph();
        }
        async function ListUsers(index)
        {
            const reference = await document.getElementById("Hidden");
            var users = await JSON.parse(reference.textContent);
            const destinationDiv = document.getElementById("ReferenceList");
            for (var child of destinationDiv.childNodes)
            {
                destinationDiv.removeChild(child);
            }
            var links = destinationDiv.getElementsByClassName("ReferenceLink");
            for (var child of links)
            {
                child.remove();
            }
            users = users.slice(index, index + interval);
            for (let i = 0; i < users.length; i++) 
            {
                var userLink = document.createElement('a');
                userLink.className = "ReferenceLink";
                userLink.href = "http://localhost:5220/views/usermodel/user/" + users[i].id;
                userLink.textContent = "Id: " + users[i].id + ", UserName: " + users[i].UserName + "\n";
                destinationDiv.appendChild(userLink);
            }
        }
        async function IssueTimeSpentByUserDataGet(issueId)
        {
            const myIssueResponse = await fetch("http://localhost:5220/issue/" + issueId);
            const myIssue = await myIssueResponse.json();
            const allUsersResponse = await fetch("http://localhost:5220/issuemodel/" + issueId + "/users");
            const allUsers = await allUsersResponse.json();
            issueName = myIssue.issueName;
            var timesWithUsersArray = await Promise.all(allUsers.map(async function(index){
                const issueTimeResponse = await fetch("http://localhost:5220/issuemodel/" + myIssue.id + "/" + index.id + "/timespentbyuser");
                const issueTimes = await issueTimeResponse.json();
                var issueTimeSpent = 0;
                for (var i = 0; i < issueTimes.length; i++)
                {
                    issueTimeSpent += Number(issueTimes[i].totalTimeElapsed);
                }
                const data = {
                    'UserName': index.UserName,
                    'totalTimeSpent': issueTimeSpent
                };
                return data;
            }));
            timesWithUsersArray.sort(function(a, b){
               return b.totalTimeSpent - a.totalTimeSpent;
            });
            userNames = timesWithUsersArray.map(function(index){
                return index.UserName;
            });
            timeSpentByUserArray = timesWithUsersArray.map(function(index){
                return index.totalTimeSpent;
            });
            const numRecords = 10;
            if (userNames.length > numRecords)
            {
                userNames = userNames.slice(0, numRecords);
            }
            if (timeSpentByUserArray.length > numRecords)
            {
                timeSpentByUserArray = timeSpentByUserArray.slice(0, numRecords);
            }
        }
        async function IssueTimeSpentByUserGraph()
        {
            var myChart = document.getElementById("timeSpentByUser");
            timeSpentByUserChart = new Chart(myChart, 
            {
                type: 'pie',
                data: {
                    labels: userNames,
                    datasets: [{
                        label: "TimeSpent",
                        data: timeSpentByUserArray,
                        hoverOffset: 4
                    }],
                    options: {
                    plugins: {
                    datalabels: {
                        formatter: (value) => 
                        {
                            if (value < 15) return '';
                            return value + '%';
                        },
                    },
                    }
                }
            }});
        }
        async function TabUp()
        {
            const reference = await document.getElementById("Hidden");
            const users = await JSON.parse(reference.textContent);
            if (index == null)
            {
                index = 0;
            }
            if ((users.length) > (Number(index) + interval))
            {
                index += interval;
                ListUsers(Number(index));
            }
        }
        async function TabDown()
        {
            if (index == null)
            {
                index = 0;
            }
            if (Number(index - interval) >= 0)
            {
                index -= interval;
                ListUsers(Number(index));
            }
        }