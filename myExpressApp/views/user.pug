extends default

block content
    #content
        div.recordHeader
            h1 Username: #{username}
            h1 User ID: #{id}
            h3 Total Time Spent Working On GitHub Issues: #{TotalTimeElapsed}
            h3 Total Issues Logged: #{issues.length}
        div.CanvasWrapper
            h1.CanvasHeader Time Spent By Issue
            canvas#myChart
        p#idhidden #{id}
        p#Hidden #{JSON.stringify(issues)}
        h1#referenceListHeader Logged Issues:
        div#referenceList
        button(id="nextbtn" class="tabbtn" onclick="TabUp()") Next
        button(id="backbtn" class="tabbtn" onclick="TabDown()") Previous
    script(src="https://cdn.jsdelivr.net/npm/chart.js")
    script.
        var timeSpentArray;
        var issueName;
        var index;
        const interval = 2;
        Main();
        async function Main()
        {
            index = 0;
            await ListIssues(0);
            await GetIssuesTimeSpentData();
            await IssueTimeSpentByUserGraph();
        }
        async function ListIssues(index)
        {
            const issuesReference = await document.getElementById("Hidden");
            var issues = await JSON.parse(issuesReference.textContent);
            const destinationDiv = document.getElementById("referenceList");
            for (var child of destinationDiv.childNodes)
            {
                console.log(child);
                destinationDiv.removeChild(child);
            }
            var links = document.getElementsByClassName("referenceLink");
            for (var child of links)
            {
                child.remove();
            }
            issues = issues.slice(index, index + interval);
            for (let i = 0; i < issues.length; i++)
            {
                var link = document.createElement('a');
                link.className = "referenceLink";
                link.href = "http://localhost:5220/views/issuemodel/issue/" + issues[i].id;
                link.textContent = "Id: " + issues[i].id + ", URL: " + issues[i].url + ", Name: " + issues[i].issueName + "\n";
                destinationDiv.appendChild(link);
            }
        }
        async function GetIssuesTimeSpentData()
        {
            var userid = await document.getElementById("idhidden").textContent;
            var relatedIssuesResponse = await fetch("http://localhost:5220/usermodel/" + userid + "/issues")
            const relatedIssues = await relatedIssuesResponse.json();
            var timesWithIssuesArray = await Promise.all(relatedIssues.map(async function(index){
                const issueTimeResponse = await fetch("http://localhost:5220/issuemodel/" + index.id + "/timespent");
                const issueTime = await issueTimeResponse.json();
                const data = {
                    totalTimeSpent: issueTime.totaltimespent,
                    issueName: index.issueName,
                }
                console.log(data);
                return data;
            }));
            timesWithIssuesArray.sort(function(a, b){
               return b.totalTimeSpent - a.totalTimeSpent;
            });
            timeSpentArray = timesWithIssuesArray.map(function(index){
                return index.totalTimeSpent;
            });
            issueNames = timesWithIssuesArray.map(function(index){
                return index.issueName;
            });
            const numRecords = 10;
            if (issueNames.length > numRecords)
            {
                issueNames = issueNames.slice(0, numRecords);
            }
            if (timeSpentArray.length > numRecords)
            {
                timeSpentArray = timeSpentArray.slice(0, numRecords);
            }
        }
        async function IssueTimeSpentByUserGraph()
        {
            console.log("GRAPHING");
            var myChart = document.getElementById("myChart");
            timeSpentByUserChart = new Chart(myChart, 
            {
                type: 'pie',
                data: {
                    labels: issueNames,
                    datasets: [{
                        label: issueName,
                        data: timeSpentArray,
                        hoverOffset: 4
                    }],
                    options: {
                    plugins: {
                    datalabels: {
                        formatter: (value) => {
                        if (value < 15) return '';
                        return value + '%';
                        },
                    },
                    }
                }
            }});
        }
        async function TabUp()
        {
            const issuesReference = await document.getElementById("Hidden");
            var issues = await JSON.parse(issuesReference.textContent);
            if (index == null)
            {
                index = 0;
            }
            if ((issues.length) >= (Number(index) + interval))
            {
                index += interval;
                ListIssues(Number(index));
            }
        }
        async function TabDown()
        {
            if (index == null)
            {
                index = 0;
            }
            if (Number(index - interval) >= 0)
            {
                index -= interval;
                ListIssues(Number(index));
            }
        }